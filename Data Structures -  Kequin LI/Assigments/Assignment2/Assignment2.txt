//Name: Sonal Shivaji Kamble

class Statistician {
  private int length;
  private double sum;
  private double mean;
  private double minimum;
  private double maximum;
  private double number;

  private boolean isAdding;

  public Statistician() {
    length = 0;
    sum = 0.0;
    mean = 0.0;
    minimum = Integer.MAX_VALUE;
    maximum = Integer.MIN_VALUE;
    isAdding = false;
  }

  public void next(double number) {
    isAdding = true;
    this.number = number;
    length = length();
    sum = sum();
    mean = mean();
    maximum = maximum();
    minimum = minimum();
    isAdding = false;
  }

  public int length() {
    if (isAdding)
      length++;
    if (length > Integer.MAX_VALUE)
      throw new ArithmeticException("Length overflow");
    else
      return length;
  }

  public double sum() {
    if (isAdding) {
      if (Double.isInfinite(sum + number))
        return this.sum > 0 ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
      else
        sum += number;
    }
    return sum;
  }

  public double mean() {
    isAdding = false;

    if (length() > Integer.MAX_VALUE)
      throw new ArithmeticException("Length overflow");

    if (length() != 0) {
      if (Double.isInfinite(sum() / length()))
        return sum > 0 ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
      else
        mean = sum() / length();
    } else
      return Double.NaN;

    return mean;
  }

  public double maximum() {
    isAdding = false;
    if (length() == 0)
      return Double.NaN;
    else if (number > maximum)
      maximum = number;
    return maximum;
  }

  public double minimum() {
    isAdding = false;
    if (length() == 0)
      return Double.NaN;
    else if (number < minimum)
      minimum = number;
    return minimum;
  }

  @Override
  public boolean equals(java.lang.Object obj) {
    if (obj != null && obj instanceof Statistician) {
      Statistician ref = (Statistician) obj;

        return (length == ref.length &&
        sum == ref.sum &&
        mean == ref.mean &&
        minimum == ref.minimum &&
        maximum == ref.maximum);
    }
    return false;
  }

  public void clear() {
    number = 0;
    length = 0;
    sum = 0.0;
    mean = 0.0;
    minimum = Integer.MAX_VALUE;
    maximum = Integer.MIN_VALUE;
    isAdding = false;
  }

  public static Statistician union(Statistician s1, Statistician s2) {
    Statistician u = new Statistician();

    if (s1 != null && s2 != null) {
      u.length = s1.length + s2.length;
      u.sum = s1.sum + s2.sum;
      u.mean = s1.mean + s2.mean;

      if (s1.minimum < s2.minimum)
        u.minimum = s1.minimum;
      else
        u.minimum = s2.minimum;

      if (s1.maximum > s2.maximum)
        u.maximum = s1.maximum;
      else
        u.maximum = s2.maximum;

      return u;
    } else throw new NullPointerException("s1 or s2 cannot be null");
  }

  public void addAll(Statistician addend) {
    if (addend != null) {
      length += addend.length;
      sum += addend.sum;
      mean += addend.mean;

      if (minimum < addend.minimum)
        minimum = minimum;
      else
        minimum = addend.minimum;

      if (maximum > addend.maximum)
        maximum = maximum;
      else
        maximum = addend.maximum;
    } else throw new NullPointerException("addend cannot be null");
  }
}

public class StatisticianDemonstration {
  public static void main(String[] args) {
    Statistician s = new Statistician();
    System.out.println("Supply the following numbers to s:");
    for (double i = 0; i < 10; i++) {
      s.next(i);
      System.out.print(i + " ");
    }
    System.out.println("\n\nThe information of statistician s is");
    print(s);

    Statistician t = new Statistician();
    System.out.println("Supply the following numbers to t:");
    for (double i = 0; i < 2.5; i += 0.5) {
      t.next(i);
      System.out.print(i + " ");
    }
    for (double i = 9; i > 6.5; i -= 0.5) {
      t.next(i);
      System.out.print(i + " ");
    }
    System.out.println("\n\nThe information of statistician t is");
    print(t);

    if (s.equals(t))
      System.out.println("s equals to t\n");

    t.clear();
    System.out.println("The information of statistician t after t.clear() is");
    print(t);

    System.out.println("Supply the following numbers to t:");
    for (double i = 0; i < 20; i++) {
      t.next((i + 1) * 0.5);
      System.out.print((i + 1) * 0.5 + " ");
    }
    System.out.println("\n\nThe information of statistician t is");
    print(t);

    Statistician u;
    u = Statistician.union(s, t);
    System.out.println("The information of statistician u=s+t is");
    print(u);

    if (!s.equals(u))
      System.out.println("s does not equal to u\n");

    s.addAll(t);
    System.out.println("The information of statistician s after s.addAll(t) is");
    print(s);

    s.clear();
    System.out.println("The information of statistician s after s.clear() is");
    print(s);
  }

  private static void print(Statistician s) {
    System.out.println("  length = " + s.length());
    System.out.println("  sum = " + s.sum());
    System.out.println("  mean = " + s.mean());
    System.out.println("  minimum = " + s.minimum());
    System.out.println("  maximum = " + s.maximum() + "\n");
  }
}
